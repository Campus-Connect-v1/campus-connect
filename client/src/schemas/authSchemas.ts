import { z } from "zod";





export const loginSchema = z.object({
  email: z.string().email("Invalid email address"),
  password: z.string().min(6, "Password must be at least 6 characters long"),
});

export type LoginSchema = z.infer<typeof loginSchema>;


export const signupSchema = z
  .object({
    first_name: z
      .string()
      .trim()
      .min(2, "First name must be at least 2 characters long")
      .max(100, "First name must not exceed 100 characters"),
    last_name: z
      .string()
      .trim()
      .min(2, "Last name must be at least 2 characters long")
      .max(100, "Last name must not exceed 100 characters"),
    email: z
      .string()
      .email("Invalid email address")
      .refine(
        (val) =>
          val.endsWith(".edu") || val.includes(".edu.") || val.includes(".ac."),
        {
          message: "Email must be a valid university email (.edu or .ac domains)",
        }
      ),
    password: z
      .string()
      .min(6, "Password must be at least 6 characters long")
      .max(100, "Password must not exceed 100 characters"),
    confirmPassword: z
      .string()
      .min(6, "Confirm password must be at least 6 characters long")
      .max(100, "Confirm password must not exceed 100 characters")
      .optional(),
    // uni_id is typically auto-generated by the database; keep it optional for inputs
    university_id: z.union([z.string(), z.number()]).optional(),
  })
  .refine((data) => data.password === data.confirmPassword, {
    path: ["confirmPassword"],
    message: "Passwords do not match",
  });

export type SignupSchema = z.infer<typeof signupSchema>;


export const forgotSchema = z.object({
  email: z.string().email("Enter a valid email"),
});
export type ForgotSchema = z.infer<typeof forgotSchema>;


export const resetPasswordSchema = z
  .object({
    password: z.string().min(6, "Password must be at least 6 characters long"),
    confirmPassword: z.string().min(6, "Confirm password must be at least 6 characters long"),
  })
  .refine((data) => data.password === data.confirmPassword, {
    path: ["confirmPassword"],
    message: "Passwords do not match",
  });
export type ResetPasswordSchema = z.infer<typeof resetPasswordSchema>;


export const verifyEmailSchema = z.object({
  email: z.string().email("Please enter a valid email"),
});
export type VerifyEmailSchema = z.infer<typeof verifyEmailSchema>;


export const verifyOtpSchema = z.object({
  otp: z
    .string()
    .min(6, "OTP must be 6 digits")
    .max(6, "OTP must be 6 digits")
    .regex(/^\d+$/, "OTP must contain only numbers"),
})

export type VerifyOtpSchema = z.infer<typeof verifyOtpSchema>


